node('linux') {
    try {
        stage('Checkout') {
            checkout scm
            //get env file
            sh "cat package.json | jq .name > pb-service-name"            
            setBuildStatus("Build started", "PENDING")
        }

        stage('Setup') {
            sh 'git describe --always > result'
            def commit = readFile('result').trim()
            env.BUILD_NAME = '#' + env.BUILD_NUMBER + ' - ' + commit
            currentBuild.displayName = env.BUILD_NAME
            currentBuild.description = 'Build number, git tag'
        }

        stage('Prebuild'){
            def service_name = readFile('pb-service-name').trim()
  
            // check package.json is updated with the current job name and allow to deploy micro-service-seed
            if (service_name.contains('micro-service-seed') && !env.JOB_NAME.contains('micro-service-seed')) {
                throw new Exception("Please change package.json service-name to your current service name")
            }
            def env_file_source = "s3://pb-micro-services-static/${service_name}"
            sh "aws s3 cp ${env_file_source}/.env-production .env"
            sh "aws s3 presign s3://pb-github/id_rsa --expires-in 300 > ./id_rsa_url"
        }

        stage('Build') {
            def service_name = readFile('pb-service-name').trim()
            def id_rsa_url = readFile('id_rsa_url').trim()
            sh "docker build . -t ${service_name}:latest --build-arg key='$id_rsa_url'"
            // Remove files we got from S3.
            sh "rm -f .env"
        }

        stage('Test') {
            def service_name = readFile('pb-service-name').trim()
            sh "docker run -t ${service_name}:latest npm run test"
            sh "docker run -t ${service_name}:latest npm run cov-cobertura"
        }

        stage('Deliver') {
            def branch_name_tag = BRANCH_NAME.replaceAll('[\\/-]','_')
            def service_name = readFile('pb-service-name').trim()
            def commit = readFile('result').trim()
            def date = new Date().format( 'dd.MM.yyyy' )
            sh "docker tag ${service_name}:latest 475376316304.dkr.ecr.us-east-1.amazonaws.com/${service_name}:${branch_name_tag}_${commit}_${date}"
            sh "/usr/local/bin/ecr_login.sh"
            sh "docker push 475376316304.dkr.ecr.us-east-1.amazonaws.com/${service_name}:${branch_name_tag}_${commit}_${date}"

            setBuildStatus("Build succeeded", "SUCCESS")
        }
    } catch (err) {
        setBuildStatus("Build failed", "FAILURE");
        throw(err);
    }
}

def setBuildStatus(String message, String state) {
    withCredentials([[
        $class: 'UsernamePasswordMultiBinding',
        credentialsId: '45dcce9d-50be-47d1-ae25-f6cfc434ce44',
        usernameVariable: 'GIT_USERNAME',
        passwordVariable: 'GIT_PASSWORD'
    ]]) {
        sh 'git rev-parse HEAD > commit'
        def gitCommit = readFile('commit').trim()
        def service_name = readFile('pb-service-name').trim()
        step([
            $class: "GitHubCommitStatusSetter",
            reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/playbuzz/${service_name}"],
            errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
            commitShaSource: [$class: "ManuallyEnteredShaSource", sha: "${gitCommit}" ],
            statusResultSource: [$class: "ConditionalStatusResultSource",
                results: [[$class: "AnyBuildResult", message: message, state: state]]
            ]
        ]);
    };
}
